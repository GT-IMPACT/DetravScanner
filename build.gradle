buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "MavenRepo"
            url = "https://repo.maven.apache.org/maven2"
        }
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.TheElan:ForgeGradle:f59d5c1f8d'
    }
}
apply plugin: 'java'
apply plugin: 'forge'
//apply plugin: 'idea'

//idea.module.inheritOutputDirs = true

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

version = "${config.detravscanner.version}"
group= "com.detrav.detravscannermod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "GT Scanner Mod"

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "eclipse"
}

configurations {
    provided
    embedded
    compile.extendsFrom provided, embedded
}

repositories {
    //ivy {
    //    name "BuildCraft"
    //    artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    //}
    //ivy {
    //    name 'CoFHLib'
    //    artifactPattern "http://addons-origin.cursecdn.com/files/${config.cofhlib.cf}/[module]-[revision].[ext]"
    //}
    //ivy {
    //    name 'CoFHCore'
    //    artifactPattern "http://addons-origin.cursecdn.com/files/${config.cofhcore.cf}/[module]-[revision].[ext]"
    //}
    //ivy {
    //    name 'Railcraft'
    //    artifactPattern "http://addons-origin.cursecdn.com/files/${config.railcraft.cf}/[module]_[revision].[ext]"
    //}
	//ivy {
    //    name 'IC2NuclearControl'
    //    artifactPattern "http://addons-origin.cursecdn.com/files/${config.nc.cf}/[module]-[revision].[ext]"
    //}
}

configurations {
    mods
    provided
    embedded
    compile.extendsFrom provided, embedded
}

dependencies {
    compileOnly fileTree(dir: 'norun/', include:'*.jar')
    provided fileTree(dir: 'libs', include: '*.jar')
}
task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}
task generateDebugJar(type: Copy) {
    from sourceSets.main.allSource
    into "$buildDir/debugjarsrc/java"
    filter { line -> line.replaceAll('@false', '@true') }
}
task compileDebugJar(type: JavaCompile, dependsOn: generateDebugJar){
	source = file("$buildDir/debugjarsrc")
	classpath = sourceSets.main.compileClasspath
	destinationDir =  file("$buildDir/debugjarCompiled")
}
task copyResources(type: Copy,dependsOn: compileDebugJar){
	from sourceSets.main.resources
	into "$buildDir/debugjarCompiled"
}
artifacts {
    archives devJar
}
processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    ext.srcFiles = "$projectDir/src/main/resources"
    ext.destDir = "$projectDir/build/classes/main"

    // registering inputs & outputs allow gradle to skip if UP-TO-DATE
    inputs.files srcFiles
    outputs.dir destDir

    println 'starting processResources'
    println 'srcFiles: ' + srcFiles
    println 'destDir: ' + destDir


    copy {
        // replace stuff in mcmod.info, nothing else
        from(srcFiles)
        into(destDir)
        include 'mcmod.info'
            // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version

    }


    copy {
        // copy everything else, thats not the mcmod.info
        from(srcFiles)
        into(destDir)
        exclude 'mcmod.info'

    }
}